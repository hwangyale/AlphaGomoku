# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_board')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_board')
    _board = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_board', [dirname(__file__)])
        except ImportError:
            import _board
            return _board
        try:
            _mod = imp.load_module('_board', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _board = swig_import_helper()
    del swig_import_helper
else:
    import _board
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _board.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _board.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _board.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _board.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _board.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _board.SwigPyIterator_equal(self, x)

    def copy(self):
        return _board.SwigPyIterator_copy(self)

    def next(self):
        return _board.SwigPyIterator_next(self)

    def __next__(self):
        return _board.SwigPyIterator___next__(self)

    def previous(self):
        return _board.SwigPyIterator_previous(self)

    def advance(self, n):
        return _board.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _board.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _board.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _board.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _board.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _board.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _board.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _board.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _board.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _board.IntVector___nonzero__(self)

    def __bool__(self):
        return _board.IntVector___bool__(self)

    def __len__(self):
        return _board.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _board.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _board.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _board.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _board.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _board.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _board.IntVector___setitem__(self, *args)

    def pop(self):
        return _board.IntVector_pop(self)

    def append(self, x):
        return _board.IntVector_append(self, x)

    def empty(self):
        return _board.IntVector_empty(self)

    def size(self):
        return _board.IntVector_size(self)

    def swap(self, v):
        return _board.IntVector_swap(self, v)

    def begin(self):
        return _board.IntVector_begin(self)

    def end(self):
        return _board.IntVector_end(self)

    def rbegin(self):
        return _board.IntVector_rbegin(self)

    def rend(self):
        return _board.IntVector_rend(self)

    def clear(self):
        return _board.IntVector_clear(self)

    def get_allocator(self):
        return _board.IntVector_get_allocator(self)

    def pop_back(self):
        return _board.IntVector_pop_back(self)

    def erase(self, *args):
        return _board.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _board.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _board.IntVector_push_back(self, x)

    def front(self):
        return _board.IntVector_front(self)

    def back(self):
        return _board.IntVector_back(self)

    def assign(self, n, x):
        return _board.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _board.IntVector_resize(self, *args)

    def insert(self, *args):
        return _board.IntVector_insert(self, *args)

    def reserve(self, n):
        return _board.IntVector_reserve(self, n)

    def capacity(self):
        return _board.IntVector_capacity(self)
    __swig_destroy__ = _board.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _board.IntVector_swigregister
IntVector_swigregister(IntVector)

BOARD_SIZE = _board.BOARD_SIZE
STONES = _board.STONES
EMPTY = _board.EMPTY
BLACK = _board.BLACK
WHITE = _board.WHITE
DRAW = _board.DRAW
OPEN_FOUR = _board.OPEN_FOUR
FOUR = _board.FOUR
OPEN_THREE = _board.OPEN_THREE
THREE = _board.THREE
OPEN_TWO = _board.OPEN_TWO
TWO = _board.TWO
class Board(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Board, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Board, name)
    __repr__ = _swig_repr
    __swig_setmethods__["player"] = _board.Board_player_set
    __swig_getmethods__["player"] = _board.Board_player_get
    if _newclass:
        player = _swig_property(_board.Board_player_get, _board.Board_player_set)
    __swig_setmethods__["step"] = _board.Board_step_set
    __swig_getmethods__["step"] = _board.Board_step_get
    if _newclass:
        step = _swig_property(_board.Board_step_get, _board.Board_step_set)
    __swig_setmethods__["is_over"] = _board.Board_is_over_set
    __swig_getmethods__["is_over"] = _board.Board_is_over_get
    if _newclass:
        is_over = _swig_property(_board.Board_is_over_get, _board.Board_is_over_set)
    __swig_setmethods__["winner"] = _board.Board_winner_set
    __swig_getmethods__["winner"] = _board.Board_winner_get
    if _newclass:
        winner = _swig_property(_board.Board_winner_get, _board.Board_winner_set)
    __swig_setmethods__["history"] = _board.Board_history_set
    __swig_getmethods__["history"] = _board.Board_history_get
    if _newclass:
        history = _swig_property(_board.Board_history_get, _board.Board_history_set)
    __swig_setmethods__["zobristKey"] = _board.Board_zobristKey_set
    __swig_getmethods__["zobristKey"] = _board.Board_zobristKey_get
    if _newclass:
        zobristKey = _swig_property(_board.Board_zobristKey_get, _board.Board_zobristKey_set)
    __swig_setmethods__["zobrist"] = _board.Board_zobrist_set
    __swig_getmethods__["zobrist"] = _board.Board_zobrist_get
    if _newclass:
        zobrist = _swig_property(_board.Board_zobrist_get, _board.Board_zobrist_set)
    if _newclass:
        initZobrist = staticmethod(_board.Board_initZobrist)
    else:
        initZobrist = _board.Board_initZobrist

    def __init__(self, *args):
        this = _board.new_Board(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def move(self, pos, check_two=True):
        return _board.Board_move(self, pos, check_two)

    def get_board(self):
        return _board.Board_get_board(self)

    def get_positions(self, is_player, gomoku_type):
        return _board.Board_get_positions(self, is_player, gomoku_type)

    def _get_positions(self, is_player, gomoku_type):
        return _board.Board__get_positions(self, is_player, gomoku_type)
    __swig_destroy__ = _board.delete_Board
    __del__ = lambda self: None
Board_swigregister = _board.Board_swigregister
Board_swigregister(Board)
cvar = _board.cvar

def Board_initZobrist():
    return _board.Board_initZobrist()
Board_initZobrist = _board.Board_initZobrist


def get_elements(set):
    return _board.get_elements(set)
get_elements = _board.get_elements

def vct(board, max_depth, max_time):
    return _board.vct(board, max_depth, max_time)
vct = _board.vct
# This file is compatible with both classic and new-style classes.


